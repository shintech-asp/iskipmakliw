@{
    ViewData["Title"] = "3D Customization";
}

<div class="row layout-top-spacing py-5">
    <div class="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12 layout-spacing">
        <div class="widget-content widget-content-area br-8 p-4">
            <h4 class="mb-3">Customize your own furniture!</h4>
            <canvas id="viewer" style="width:100%; height:600px; border-radius: 8px; border: 1px solid #ddd;"></canvas>
        </div>
    </div>

    <div class="col-xl-3 col-lg-3 col-md-12 col-sm-12 col-12 layout-spacing">
        <div class="widget-content widget-content-area br-8 p-4">

            <!-- Model Selector -->
            <h5 class="mb-2">Select Model</h5>
            <div class="btn-group mb-3">
                <button class="btn btn-outline-primary" onclick="loadModel('/models/chair.glb')">Chair</button>
                <button class="btn btn-outline-primary" onclick="loadModel('/models/drawer.glb')">Drawer</button>
                <button class="btn btn-outline-primary" onclick="loadModel('/models/table.glb')">Table</button>
            </div>

            <!-- Color -->
            <h5 class="mb-2 mt-3">Change Color</h5>
            <div class="d-flex gap-2 mb-3">
                <input type="color" class="form-control form-control-color" onchange="changeColor(this.value)" value="#ff0000">
            </div>

            <!-- Texture -->
            <h5 class="mb-2 mt-3">Apply Texture</h5>
            <div class="d-flex gap-2 mb-3">
                <img src="/textures/oak.jpg" class="img-thumbnail" style="width:60px; height:60px; cursor:pointer;" onclick="applyTexture('/textures/oak.jpg')" />
                <img src="/textures/synthetic_wood.jpg" class="img-thumbnail" style="width:60px; height:60px; cursor:pointer;" onclick="applyTexture('/textures/synthetic_wood.jpg')" />
                <img src="/textures/wood_table_worn.jpg" class="img-thumbnail" style="width:60px; height:60px; cursor:pointer;" onclick="applyTexture('/textures/wood_table_worn.jpg')" />
                <img src="/textures/wooden_planks.jpg" class="img-thumbnail" style="width:60px; height:60px; cursor:pointer;" onclick="applyTexture('/textures/wooden_planks.jpg')" />
            </div>

            <!-- Sliders -->
            <h5 class="mb-2 mt-3">Resize</h5>
            <label class="form-label">Overall Size</label>
            <input type="range" id="scaleSlider" class="form-range" min="0.5" max="2" step="0.1" value="1" onchange="changeScale(this.value)">
            <span id="scaleValue" class="text-muted">1.0</span>

            <label class="form-label mt-2">Width (X)</label>
            <input type="range" id="widthSlider" class="form-range" min="0.5" max="2" step="0.1" value="1" onchange="changeWidth(this.value)">
            <span id="widthValue" class="text-muted">1.0</span>

            <label class="form-label mt-2">Height (Y)</label>
            <input type="range" id="heightSlider" class="form-range" min="0.5" max="2" step="0.1" value="1" onchange="changeHeight(this.value)">
            <span id="heightValue" class="text-muted">1.0</span>

            <div class="mt-3">
                <button class="btn btn-dark" onclick="resetDimensions()">Reset</button>
                <button class="btn btn-success">Submit</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="importmap">
        {
          "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.module.js"
          }
        }
    </script>

    <script type="module">
        import * as THREE from "three";
        import { GLTFLoader } from "https://cdn.jsdelivr.net/npm/three@0.150.1/examples/jsm/loaders/GLTFLoader.js";
        import { OrbitControls } from "https://cdn.jsdelivr.net/npm/three@0.150.1/examples/jsm/controls/OrbitControls.js";

        let scene, camera, renderer, controls, model;
        let currentScale = 1.0, currentWidth = 1.0, currentHeight = 1.0;

        const canvas = document.getElementById("viewer");

        // Scene
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);

        // Camera
        camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
        camera.position.set(0, 2, 4);

        // Renderer
        renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
        renderer.setSize(canvas.clientWidth, canvas.clientHeight);
        renderer.shadowMap.enabled = true;

        // Lights
        scene.add(new THREE.AmbientLight(0x404040, 0.6));
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
        directionalLight.position.set(5, 10, 5);
        directionalLight.castShadow = true;
        scene.add(directionalLight);

        // Controls
        controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;

        // Function to center & fit model
        function centerAndFitModel(object) {
            const box = new THREE.Box3().setFromObject(object);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            object.position.sub(center);
            const maxDim = Math.max(size.x, size.y, size.z);
            const fov = camera.fov * (Math.PI / 180);
            const cameraDistance = Math.abs(maxDim / Math.sin(fov / 2)) * 1.2;
            camera.position.set(cameraDistance, cameraDistance * 0.5, cameraDistance);
            controls.target.set(0, 0, 0);
            controls.update();
        }

        // Load Model (replaces current model)
        function loadModel(path) {
            const loader = new GLTFLoader();
            loader.load(path,
                (gltf) => {
                    if (model) {
                        scene.remove(model);
                        model.traverse((child) => {
                            if (child.isMesh) child.geometry.dispose();
                        });
                    }
                    model = gltf.scene;

                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.material = new THREE.MeshStandardMaterial({
                                color: 0xcccccc,
                                roughness: 0.5,
                                metalness: 0.1
                            });
                            child.castShadow = true;
                            child.receiveShadow = true;
                        }
                    });

                    centerAndFitModel(model);
                    scene.add(model);
                    updateModelScale();
                },
                undefined,
                (error) => console.error("Error loading model:", error)
            );
        }
        window.loadModel = loadModel;

        // Customization
        window.changeColor = (hex) => {
            if (!model) return;
            model.traverse((child) => {
                if (child.isMesh) {
                    child.material.color.setHex(hex.replace('#', '0x'));
                    child.material.map = null;
                }
            });
        };

        window.applyTexture = (path) => {
            if (!model) return;
            const textureLoader = new THREE.TextureLoader();

            textureLoader.load(
                path,
                (texture) => {
                    texture.wrapS = THREE.RepeatWrapping;
                    texture.wrapT = THREE.RepeatWrapping;
                    texture.repeat.set(1, 1);

                    model.traverse((child) => {
                        if (child.isMesh) {
                            // If the mesh already has a material, reuse it
                            child.material.map = texture;
                            child.material.color.set(0xffffff); // Reset to white so texture shows properly
                            child.material.needsUpdate = true;
                        }
                    });
                },
                undefined,
                (err) => {
                    console.error("❌ Error loading texture:", err);
                }
            );
        };

        // Scaling
        window.changeScale = (scale) => {
            currentScale = parseFloat(scale);
            updateModelScale();
            document.getElementById('scaleValue').textContent = currentScale.toFixed(1);
        };

        window.changeWidth = (width) => {
            currentWidth = parseFloat(width);
            updateModelScale();
            document.getElementById('widthValue').textContent = currentWidth.toFixed(1);
        };

        window.changeHeight = (height) => {
            currentHeight = parseFloat(height);
            updateModelScale();
            document.getElementById('heightValue').textContent = currentHeight.toFixed(1);
        };

        window.resetDimensions = () => {
            currentScale = 1.0;
            currentWidth = 1.0;
            currentHeight = 1.0;
            document.getElementById('scaleSlider').value = 1.0;
            document.getElementById('widthSlider').value = 1.0;
            document.getElementById('heightSlider').value = 1.0;
            document.getElementById('scaleValue').textContent = '1.0';
            document.getElementById('widthValue').textContent = '1.0';
            document.getElementById('heightValue').textContent = '1.0';
            updateModelScale();
        };

        function updateModelScale() {
            if (!model) return;
            model.scale.set(
                currentScale * currentWidth, // Width (X)
                currentScale * currentHeight, // Height (Y)
                currentScale                 // Depth (Z)
            );
        }

        // Resize
        function handleResize() {
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
            renderer.setSize(width, height, false);
        }
        window.addEventListener("resize", handleResize);

        // Animate
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();

        // Load initial model
        loadModel("/models/chair.glb");
    </script>
}
